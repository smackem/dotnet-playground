// Signature file for parser generated by fsyacc
module internal ImageLang.Lib.Parser
type token = 
  | IDENT of (string)
  | STRING of (string)
  | NUMBER of (double)
  | EOF
  | TRUE
  | FALSE
  | LBRACE
  | RBRACE
  | IF
  | ELSE
  | FOR
  | IN
  | YIELD
  | DOTDOT
  | COLOR
  | KERNEL
  | CONVOLUTE
  | RECT
  | NOT
  | AT
  | COMMA
  | DOT
  | LPAREN
  | RPAREN
  | PLUS
  | MINUS
  | STAR
  | SLASH
  | PERCENT
  | EQEQ
  | NEQ
  | GT
  | GE
  | LT
  | LE
  | COLONEQ
  | EQ
  | AND
  | OR
type tokenId = 
    | TOKEN_IDENT
    | TOKEN_STRING
    | TOKEN_NUMBER
    | TOKEN_EOF
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_LBRACE
    | TOKEN_RBRACE
    | TOKEN_IF
    | TOKEN_ELSE
    | TOKEN_FOR
    | TOKEN_IN
    | TOKEN_YIELD
    | TOKEN_DOTDOT
    | TOKEN_COLOR
    | TOKEN_KERNEL
    | TOKEN_CONVOLUTE
    | TOKEN_RECT
    | TOKEN_NOT
    | TOKEN_AT
    | TOKEN_COMMA
    | TOKEN_DOT
    | TOKEN_LPAREN
    | TOKEN_RPAREN
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_STAR
    | TOKEN_SLASH
    | TOKEN_PERCENT
    | TOKEN_EQEQ
    | TOKEN_NEQ
    | TOKEN_GT
    | TOKEN_GE
    | TOKEN_LT
    | TOKEN_LE
    | TOKEN_COLONEQ
    | TOKEN_EQ
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Program
    | NONTERM_StatementList
    | NONTERM_Statement
    | NONTERM_Expr
    | NONTERM_AndExpr
    | NONTERM_Cond
    | NONTERM_Term
    | NONTERM_Special
    | NONTERM_Molecule
    | NONTERM_MoleculeList
    | NONTERM_Atom
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Ast.program) 
