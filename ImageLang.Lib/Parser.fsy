%{

open Ast

let dbg value =
    printfn "%s" (if obj.ReferenceEquals(value, null) then "(null)" else value.ToString())
    //printfn "%A" value
    value

%}

%start start
%type <Ast.program> start

%token AND OR
%token COLONEQ EQ
%token EQEQ NEQ GT GE LT LE
%token PLUS MINUS STAR SLASH PERCENT
%token LPAREN RPAREN
%token NOT AT COMMA DOT SEMICOLON
%token FOR IN YIELD DOTDOT
%token IF ELSE
%token LBRACE RBRACE LBRACKET RBRACKET
%token TRUE FALSE
%token QMARK COLON
%token LOG BLT

%token EOF

%token <double> NUMBER
%token <string> STRING
%token <string> IDENT

%left AT NOT QMARK COLON OR BLT
%left SEMICOLON DOT
%right MINUS LPAREN
%%

// ----------------------------- start

start: Program { $1 }

// ----------------------------- Statements

Program:
    | StatementList EOF                         { dbg (Statements $1) }

StatementList:
    | Statement StatementList                   { dbg ($1 :: $2) }
    | Statement                                 { dbg [$1] }

Statement:
    | IDENT COLONEQ Expr
                                                { dbg (Declaration($1, $3)) }
    | IDENT EQ Expr
                                                { dbg (Assignment($1, $3)) }
    | AT Atom EQ Expr
                                                { dbg (PixelAssign($2, $4)) }
    | IF Expr LBRACE StatementList RBRACE
                                                { dbg (IfThen($2, $4)) }
    | IF Expr LBRACE StatementList RBRACE ELSE LBRACE StatementList RBRACE
                                                { dbg (IfThenElse($2, $4, $8)) }
    | FOR IDENT IN Expr LBRACE StatementList RBRACE
                                                { dbg (ForIn($2, $4, $6)) }
    | FOR IDENT IN Molecule DOTDOT Molecule LBRACE StatementList RBRACE
                                                { dbg (ForInRange($2, $4, $6, $8)) }
    | YIELD Expr
                                                { dbg (Yield $2) }
    | LOG LPAREN ParameterList RPAREN
                                                { dbg (Log $3) }
    | BLT LPAREN Expr RPAREN
                                                { dbg (Blt <| Some($3)) }
    | BLT
                                                { dbg (Blt None) }

// ----------------------------- Expression

Expr:
    | Expr QMARK Expr COLON Expr                { dbg (Conditional($1, $3, $5)) }
    | Expr OR AndExpr                           { dbg (Or($1, $3)) }
    | AndExpr                                   { $1 }

AndExpr:
    | AndExpr AND Cond                          { dbg (And($1, $3)) }
    | Cond                                      { $1 }

Cond:
    | Term EQEQ Term                            { dbg (Eq($1, $3)) }
    | Term NEQ Term                             { dbg (Neq($1, $3)) }
    | Term GT Term                              { dbg (Gt($1, $3)) }
    | Term GE Term                              { dbg (Ge($1, $3)) }
    | Term LT Term                              { dbg (Lt($1, $3)) }
    | Term LE Term                              { dbg (Le($1, $3)) }
    | Term                                      { $1 }

Term:
    | Term PLUS Molecule                        { dbg (Plus($1, $3)) }
    | Term MINUS Molecule                       { dbg (Minus($1, $3)) }
    | Term STAR Molecule                        { dbg (Mul($1, $3)) }
    | Term SLASH Molecule                       { dbg (Div($1, $3)) }
    | Term PERCENT Molecule                     { dbg (Mod($1, $3)) }
    | Term IN Molecule                          { dbg (In($1, $3)) }
    | Molecule                                  { $1 }

Molecule:
    | MINUS Atom                                { dbg (Neg $2) }
    | NOT Atom                                  { dbg (Not $2) }
    | Atom DOT IDENT                            { dbg (MemberInvoke($1, $3)) }
    | Atom                                      { $1 }

MoleculeList:
    | Molecule MoleculeList                     { dbg ($1 :: $2) }
    | Molecule                                  { dbg [$1] }

Atom:
    | LPAREN Expr RPAREN                        { dbg $2 }
    | AT Atom                                   { dbg (At $2) }
    | Atom SEMICOLON Atom                       { dbg (Pos($1, $3)) }
    | IDENT                                     { dbg (Ident $1) }
    | NUMBER                                    { dbg (Number $1) }
    | STRING                                    { dbg (String $1) }
    | TRUE                                      { dbg (Boolean true) }
    | FALSE                                     { dbg (Boolean false) }
    | IDENT LPAREN ParameterListOpt RPAREN      { dbg (FunctionInvoke($1, $3))}
    | LBRACKET MoleculeList RBRACKET            { dbg (Kernel $2) }

ParameterListOpt:
    | ParameterList                             { $1 }
    |                                           { [] }

ParameterList:
    | Expr COMMA ParameterList                  { dbg ($1 :: $3) }
    | Expr                                      { dbg ([$1]) }
